name: Tests

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"
          cache: "pip"

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: 1.5.1

      - name: Install dependencies
        run: |
          cd backend
          poetry install

      - name: Run unit tests
        run: |
          cd backend
          poetry run pytest tests/unit -v

      - name: Run integration tests
        run: |
          cd backend
          poetry run pytest tests/integration -v

      - name: Upload coverage report
        uses: codecov/codecov-action@v3
        with:
          file: ./backend/coverage.xml
          fail_ci_if_error: false

  e2e-tests:
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')

    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"
          cache: "pip"

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: 1.5.1

      - name: Install dependencies
        run: |
          cd backend
          poetry install

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Start services with Docker Compose
        run: |
          docker-compose -f docker-compose.test.yml up -d

      - name: Wait for services to be ready
        run: |
          # Wait for backend to be ready
          echo "Waiting for backend to be ready..."
          timeout=120
          start_time=$(date +%s)
          while true; do
            current_time=$(date +%s)
            elapsed=$((current_time - start_time))

            if [ $elapsed -gt $timeout ]; then
              echo "Timeout waiting for services to be ready"
              docker-compose -f docker-compose.test.yml logs
              exit 1
            fi

            if curl -s http://localhost:8001/health | grep -q "ok"; then
              echo "Backend is ready!"
              break
            fi

            echo "Waiting for backend... ($elapsed seconds elapsed)"
            sleep 5
          done

      - name: Run E2E tests
        run: |
          cd backend
          poetry run pytest tests/e2e -v

      - name: Collect logs on failure
        if: ${{ failure() }}
        run: |
          echo "Collecting container logs..."
          docker-compose -f docker-compose.test.yml logs > e2e-test-logs.txt

      - name: Upload logs on failure
        if: ${{ failure() }}
        uses: actions/upload-artifact@v3
        with:
          name: e2e-test-logs
          path: e2e-test-logs.txt

      - name: Tear down services
        if: always()
        run: |
          docker-compose -f docker-compose.test.yml down -v
