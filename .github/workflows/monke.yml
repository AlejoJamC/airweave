name: Monke Gmail + Drive (matrix, cached, no-bake)

on:
  workflow_dispatch:
  pull_request:
    paths:
      - 'monke/**'
      - '.github/workflows/**'
      - 'docker/**'
      - 'backend/**'
      - 'frontend/**'
      - 'start.sh'
  push:
    branches: [ main, feat/monke ]

concurrency:
  group: monke-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # Build images ONCE, cache layers to repo cache, export as an artifact
  prep_images:
    runs-on: ubuntu-latest
    env:
      BACKEND_TAG: airweave-backend:ci-${{ github.sha }}
      FRONTEND_TAG: airweave-frontend:ci-${{ github.sha }}
      TEMPORAL_WORKER_TAG: airweave-temporal-worker:ci-${{ github.sha }}
      BACKEND_CACHE_DIR: /tmp/.buildx-cache-backend
      FRONTEND_CACHE_DIR: /tmp/.buildx-cache-frontend
    steps:
      - uses: actions/checkout@v5

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Restore backend build cache
        uses: actions/cache@v4
        with:
          path: ${{ env.BACKEND_CACHE_DIR }}
          key: buildx-backend-${{ runner.os }}-${{ hashFiles('backend/**','backend/Dockerfile') }}
          restore-keys: |
            buildx-backend-${{ runner.os }}-

      - name: Restore frontend build cache
        uses: actions/cache@v4
        with:
          path: ${{ env.FRONTEND_CACHE_DIR }}
          key: buildx-frontend-${{ runner.os }}-${{ hashFiles('frontend/**','frontend/Dockerfile') }}
          restore-keys: |
            buildx-frontend-${{ runner.os }}-

      # Build backend image (single-platform so we can --load)
      - name: Build backend (cached, load into daemon)
        uses: docker/build-push-action@v6
        with:
          context: ./backend
          file: ./backend/Dockerfile
          platforms: linux/amd64
          push: false
          load: true
          tags: ${{ env.BACKEND_TAG }}
          cache-from: type=local,src=${{ env.BACKEND_CACHE_DIR }}
          cache-to: type=local,dest=${{ env.BACKEND_CACHE_DIR }},mode=max

      # temporal-worker uses the same Dockerfile/context as backend — re-tag the same image
      - name: Tag backend as temporal-worker
        run: docker tag "${BACKEND_TAG}" "${TEMPORAL_WORKER_TAG}"

      # Build frontend image
      - name: Build frontend (cached, load into daemon)
        uses: docker/build-push-action@v6
        with:
          context: ./frontend
          file: ./frontend/Dockerfile
          platforms: linux/amd64
          push: false
          load: true
          tags: ${{ env.FRONTEND_TAG }}
          cache-from: type=local,src=${{ env.FRONTEND_CACHE_DIR }}
          cache-to: type=local,dest=${{ env.FRONTEND_CACHE_DIR }},mode=max

      - name: Export images as artifact
        run: docker save "$BACKEND_TAG" "$TEMPORAL_WORKER_TAG" "$FRONTEND_TAG" -o /tmp/monke-images.tar

      - name: Upload images tar
        uses: actions/upload-artifact@v4
        with:
          name: monke-images
          path: /tmp/monke-images.tar
          retention-days: 7

  # Matrix: each leg loads prebuilt images, starts stack, runs its connector tests
  connectors:
    needs: prep_images
    runs-on: ubuntu-latest
    environment: dev
    strategy:
      fail-fast: false
      matrix:
        include:
          - connector: gmail
            config: monke/configs/gmail.yaml
            log_file: logs/gmail.rich.log
          - connector: google_drive
            config: monke/configs/google_drive.yaml
            log_file: logs/drive.rich.log
    env:
      AIRWEAVE_API_URL: http://localhost:8001

      # your secrets/env
      OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      MISTRAL_API_KEY: ${{ secrets.MISTRAL_API_KEY }}
      DM_AUTH_PROVIDER: composio
      DM_AUTH_PROVIDER_API_KEY: ${{ secrets.COMPOSIO_API_KEY }}
      GMAIL_AUTH_PROVIDER_ACCOUNT_ID: ${{ secrets.GMAIL_AUTH_PROVIDER_ACCOUNT_ID }}
      GMAIL_AUTH_PROVIDER_AUTH_CONFIG_ID: ${{ secrets.GMAIL_AUTH_PROVIDER_AUTH_CONFIG_ID }}
      GOOGLE_DRIVE_AUTH_PROVIDER_ACCOUNT_ID: ${{ secrets.GOOGLE_DRIVE_AUTH_PROVIDER_ACCOUNT_ID }}
      GOOGLE_DRIVE_AUTH_PROVIDER_AUTH_CONFIG_ID: ${{ secrets.GOOGLE_DRIVE_AUTH_PROVIDER_AUTH_CONFIG_ID }}

      # tags must match prep job
      BACKEND_TAG: airweave-backend:ci-${{ github.sha }}
      FRONTEND_TAG: airweave-frontend:ci-${{ github.sha }}
      TEMPORAL_WORKER_TAG: airweave-temporal-worker:ci-${{ github.sha }}

    steps:
      - uses: actions/checkout@v5

      - name: Set up Python 3.11 (with pip cache)
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
          cache-dependency-path: monke/requirements.txt

      - name: Install Python deps
        run: pip install -r monke/requirements.txt

      - name: Download prebuilt images
        uses: actions/download-artifact@v4
        with:
          name: monke-images
          path: ./_images

      - name: Load images
        run: docker load -i ./_images/monke-images.tar

      # CI override so Compose uses the prebuilt images (not rebuild) + pass secrets
      - name: Compose override for CI
        run: |
          mkdir -p docker
          cat > docker/docker-compose.ci.yml <<'YAML'
          services:
            backend:
              image: ${BACKEND_TAG}
              pull_policy: never
              build: null
              environment:
                - OPENAI_API_KEY=${OPENAI_API_KEY}
                - MISTRAL_API_KEY=${MISTRAL_API_KEY}
            temporal-worker:
              image: ${TEMPORAL_WORKER_TAG}
              pull_policy: never
              build: null
              environment:
                - OPENAI_API_KEY=${OPENAI_API_KEY}
                - MISTRAL_API_KEY=${MISTRAL_API_KEY}
            frontend:
              image: ${FRONTEND_TAG}
              pull_policy: never
              build: null
          YAML

      # Your start.sh is interactive by default; feed "n\nn\n" and add the override compose file
      - name: Start Airweave (non-interactive, with override)
        env:
          CI_COMPOSE_OVERRIDE: docker/docker-compose.ci.yml
        run: |
          # If your start.sh supports CI_COMPOSE_OVERRIDE (see below), this just works:
          # printf 'n\nn\n' | ./start.sh
          # If not yet updated, we’ll export the var and still pipe "no" answers:
          printf 'n\nn\n' | ./start.sh

      - name: Wait for Airweave backend health
        run: |
          for i in {1..60}; do
            if curl -fsS http://localhost:8001/health >/dev/null; then
              echo "✅ Airweave backend is healthy"; exit 0
            fi
            echo "Waiting for backend... ($i/60)"; sleep 2
          done
          echo "❌ Backend not healthy in time"; exit 1

      - name: Run Monke ${{ matrix.connector }} test
        run: |
          mkdir -p logs
          python ci_run_single.py --config "${{ matrix.config }}" --log-file "${{ matrix.log_file }}"

      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: monke-${{ matrix.connector }}-logs
          path: logs/**
