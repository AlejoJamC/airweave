name: Monke ‚Äì single runner (build once, run all)

on:
  workflow_dispatch:
  pull_request:
    paths:
      - 'monke/**'
      - '.github/workflows/**'
      - 'docker/**'
      - 'backend/**'
      - 'frontend/**'
      - 'start.sh'
  push:
    branches: [ main, feat/monke ]

concurrency:
  group: monke-${{ github.ref }}
  cancel-in-progress: true

jobs:
  all_connectors_one_runner:
    runs-on: ubuntu-latest
    environment: dev

    env:
      # Local image tags (no registry)
      BACKEND_TAG: airweave-backend:ci-${{ github.sha }}
      FRONTEND_TAG: airweave-frontend:ci-${{ github.sha }}
      TEMPORAL_WORKER_TAG: airweave-temporal-worker:ci-${{ github.sha }}
      BACKEND_CACHE_DIR: /tmp/.buildx-cache-backend
      FRONTEND_CACHE_DIR: /tmp/.buildx-cache-frontend

      # Secrets / CI env
      AIRWEAVE_API_URL: http://localhost:8001
      OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      MISTRAL_API_KEY: ${{ secrets.MISTRAL_API_KEY }}
      DM_AUTH_PROVIDER: composio
      DM_AUTH_PROVIDER_API_KEY: ${{ secrets.COMPOSIO_API_KEY }}
      GMAIL_AUTH_PROVIDER_ACCOUNT_ID: ${{ secrets.GMAIL_AUTH_PROVIDER_ACCOUNT_ID }}
      GMAIL_AUTH_PROVIDER_AUTH_CONFIG_ID: ${{ secrets.GMAIL_AUTH_PROVIDER_AUTH_CONFIG_ID }}
      GOOGLE_DRIVE_AUTH_PROVIDER_ACCOUNT_ID: ${{ secrets.GOOGLE_DRIVE_AUTH_PROVIDER_ACCOUNT_ID }}
      GOOGLE_DRIVE_AUTH_PROVIDER_AUTH_CONFIG_ID: ${{ secrets.GOOGLE_DRIVE_AUTH_PROVIDER_AUTH_CONFIG_ID }}

    steps:
      - uses: actions/checkout@v5

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Restore backend build cache
        uses: actions/cache@v4
        with:
          path: ${{ env.BACKEND_CACHE_DIR }}
          key: buildx-backend-${{ runner.os }}-${{ hashFiles('backend/**','backend/Dockerfile') }}
          restore-keys: |
            buildx-backend-${{ runner.os }}-

      - name: Restore frontend build cache
        uses: actions/cache@v4
        with:
          path: ${{ env.FRONTEND_CACHE_DIR }}
          key: buildx-frontend-${{ runner.os }}-${{ hashFiles('frontend/**','frontend/Dockerfile') }}
          restore-keys: |
            buildx-frontend-${{ runner.os }}-

      - name: Build backend (cached, load into daemon)
        uses: docker/build-push-action@v6
        with:
          context: ./backend
          file: ./backend/Dockerfile
          platforms: linux/amd64
          load: true
          push: false
          tags: ${{ env.BACKEND_TAG }}
          cache-from: type=local,src=${{ env.BACKEND_CACHE_DIR }}
          cache-to: type=local,dest=${{ env.BACKEND_CACHE_DIR }},mode=max

      - name: Tag backend as temporal-worker
        run: docker tag "${BACKEND_TAG}" "${TEMPORAL_WORKER_TAG}"

      - name: Build frontend (cached, load into daemon)
        uses: docker/build-push-action@v6
        with:
          context: ./frontend
          file: ./frontend/Dockerfile
          platforms: linux/amd64
          load: true
          push: false
          tags: ${{ env.FRONTEND_TAG }}
          cache-from: type=local,src=${{ env.FRONTEND_CACHE_DIR }}
          cache-to: type=local,dest=${{ env.FRONTEND_CACHE_DIR }},mode=max

      - name: Compose override (use prebuilt images + env)
        run: |
          mkdir -p docker
          cat > docker/docker-compose.ci.yml <<'YAML'
          services:
            backend:
              image: ${BACKEND_TAG}
              pull_policy: never
              build: null
              environment:
                - OPENAI_API_KEY=${OPENAI_API_KEY}
                - MISTRAL_API_KEY=${MISTRAL_API_KEY}
            temporal-worker:
              image: ${TEMPORAL_WORKER_TAG}
              pull_policy: never
              build: null
              environment:
                - OPENAI_API_KEY=${OPENAI_API_KEY}
                - MISTRAL_API_KEY=${MISTRAL_API_KEY}
            frontend:
              image: ${FRONTEND_TAG}
              pull_policy: never
              build: null
          YAML

      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
          cache-dependency-path: monke/requirements.txt

      - name: Install Python deps
        run: pip install -r monke/requirements.txt

      # üîß Start the stack at repo root; export image vars to satisfy set -u in start.sh
      - name: Start Airweave (single stack)
        env:
          CI_COMPOSE_OVERRIDE: docker/docker-compose.ci.yml
          BACKEND_IMAGE: ${{ env.BACKEND_TAG }}
          TEMPORAL_WORKER_IMAGE: ${{ env.TEMPORAL_WORKER_TAG }}
          FRONTEND_IMAGE: ${{ env.FRONTEND_TAG }}
        run: |
          printf 'n\nn\n' | ./start.sh

      - name: Wait for backend health
        run: |
          for i in {1..60}; do
            if curl -fsS http://localhost:8001/health >/dev/null; then
              echo "‚úÖ Airweave backend is healthy"; exit 0
            fi
            echo "Waiting for backend... ($i/60)"; sleep 2
          done
          echo "‚ùå Backend not healthy in time"; exit 1

      # ‚úÖ Run ALL connector tests from monke/
      - name: Run acceptance tests (from monke/)
        working-directory: monke
        run: |
          mkdir -p ../logs
          set +e

          CONFIGS=(
            asana.yaml
            bitbucket.yaml
            confluence.yaml
            dropbox.yaml
            github.yaml
            gmail.yaml
            google_calendar.yaml
            google_drive.yaml
            hubspot.yaml
            jira.yaml
            linear.yaml
            monday.yaml
            notion.yaml
            outlook_calendar.yaml
            outlook_mail.yaml
            stripe.yaml
            todoist.yaml
          )

          FAIL=0
          for cfg in "${CONFIGS[@]}"; do
            echo "==== RUNNING $cfg ===="
            python ci_run_single.py --config "configs/$cfg" --log-file "../logs/${cfg%.yaml}.rich.log"
            RC=$?
            if [ $RC -ne 0 ]; then
              echo "$cfg failed with status $RC" | tee -a ../logs/_failures.txt
              FAIL=1
            fi
          done

          if [ $FAIL -ne 0 ]; then
            echo "One or more connectors failed:"
            cat ../logs/_failures.txt
            exit 1
          fi
          echo "‚úÖ All connector tests passed."

      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: monke-logs
          path: logs/**
