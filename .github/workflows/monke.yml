name: Monke – single runner (build once, run all)

on:
  workflow_dispatch:
  pull_request:
    paths:
      - "monke/**"
      - ".github/workflows/**"
      - "docker/**"
      - "backend/**"
      - "frontend/**"
      - "start.sh"

concurrency:
  group: monke-${{ github.ref }}
  cancel-in-progress: true

jobs:
  all_connectors_one_runner:
    runs-on: ubuntu-latest
    environment: dev
    # Add Azure permissions for OIDC authentication
    permissions:
      id-token: write
      contents: read
      pull-requests: read

    env:
      # Tags for locally built images (no registry)
      BACKEND_TAG: airweave-backend:ci-${{ github.sha }}
      FRONTEND_TAG: airweave-frontend:ci-${{ github.sha }}
      TEMPORAL_WORKER_TAG: airweave-temporal-worker:ci-${{ github.sha }}
      BACKEND_CACHE_DIR: /tmp/.buildx-cache-backend
      FRONTEND_CACHE_DIR: /tmp/.buildx-cache-frontend

      # Core configuration
      AIRWEAVE_API_URL: http://localhost:8001

      # AI provider keys for backend runtime
      OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      MISTRAL_API_KEY: ${{ secrets.MISTRAL_API_KEY }}
      COHERE_API_KEY: ${{ secrets.COHERE_API_KEY }}
      GROQ_API_KEY: ${{ secrets.GROQ_API_KEY }}
      CEREBRAS_API_KEY: ${{ secrets.CEREBRAS_API_KEY }}

    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0 # Fetch all history for change detection

      # Build images ONCE on this runner (with repo-scoped local layer caches)
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Restore frontend build cache
        uses: actions/cache@v4
        with:
          path: ${{ env.FRONTEND_CACHE_DIR }}
          key: buildx-frontend-${{ runner.os }}-${{ hashFiles('frontend/**','frontend/Dockerfile') }}
          restore-keys: |
            buildx-frontend-${{ runner.os }}-

      - name: Build frontend (cached, load into daemon)
        uses: docker/build-push-action@v6
        with:
          context: ./frontend
          file: ./frontend/Dockerfile
          platforms: linux/amd64
          load: true
          push: false
          tags: ${{ env.FRONTEND_TAG }}
          cache-from: type=local,src=${{ env.FRONTEND_CACHE_DIR }}
          cache-to: type=local,dest=${{ env.FRONTEND_CACHE_DIR }},mode=max

      # Force Compose to use the prebuilt images (no rebuild)
      - name: Compose override (use prebuilt images)
        run: |
          mkdir -p docker
          cat > docker/docker-compose.ci.yml <<'YAML'
          services:
            backend:
              pull_policy: never
              environment:
                # Core dependencies
                - OPENAI_API_KEY=${OPENAI_API_KEY}
                - MISTRAL_API_KEY=${MISTRAL_API_KEY}
                - COHERE_API_KEY=${COHERE_API_KEY}
                - GROQ_API_KEY=${GROQ_API_KEY}
                - CEREBRAS_API_KEY=${CEREBRAS_API_KEY}
                # Azure Key Vault for SaaS credentials
                - AZURE_KEY_VAULT_URL=${AZURE_KEY_VAULT_URL}
            temporal-worker:
              pull_policy: never
              environment:
                # Core dependencies
                - OPENAI_API_KEY=${OPENAI_API_KEY}
                - MISTRAL_API_KEY=${MISTRAL_API_KEY}
                - COHERE_API_KEY=${COHERE_API_KEY}
                - GROQ_API_KEY=${GROQ_API_KEY}
                - CEREBRAS_API_KEY=${CEREBRAS_API_KEY}
                # Azure Key Vault for SaaS credentials
                - AZURE_KEY_VAULT_URL=${AZURE_KEY_VAULT_URL}
            frontend:
              image: ${FRONTEND_TAG}
              pull_policy: never
          YAML

      # Python deps (cached)
      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "pip"
          cache-dependency-path: monke/requirements.txt

      - name: Install Python deps
        run: |
          pip install -r monke/requirements.txt
          # Install Azure dependencies if Key Vault is configured
          if [[ -n "$AZURE_KEY_VAULT_URL" ]]; then
            pip install azure-keyvault-secrets azure-identity
          fi

      # Start the stack ONCE on this runner (override merged with base compose)
      - name: Start Airweave (single stack)
        env:
          CI_COMPOSE_OVERRIDE: docker/docker-compose.ci.yml
        run: |
          # your script is interactive by default; feed "no" answers:
          printf 'n\nn\n' | ./start.sh

      - name: Wait for backend health
        run: |
          for i in {1..60}; do
            if curl -fsS http://localhost:8001/health >/dev/null; then
              echo "✅ Airweave backend is healthy"; exit 0
            fi
            echo "Waiting for backend... ($i/60)"; sleep 2
          done
          echo "❌ Backend not healthy in time"; exit 1

      # Run tests using monke.sh wrapper
      - name: Run acceptance tests
        env:
          CI: true # Tells runner to use simple output
          MONKE_NO_VENV: 1 # Skip venv setup in CI
          MONKE_MAX_PARALLEL: 5
          AIRWEAVE_API_URL: http://localhost:8001

          # Core dependencies (keep these as GitHub secrets)
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          MISTRAL_API_KEY: ${{ secrets.MISTRAL_API_KEY }}
          COHERE_API_KEY: ${{ secrets.COHERE_API_KEY }}
          GROQ_API_KEY: ${{ secrets.GROQ_API_KEY }}
          CEREBRAS_API_KEY: ${{ secrets.CEREBRAS_API_KEY }}

          # Monke test authentication
          MONKE_COMPOSIO_API_KEY: ${{ secrets.MONKE_COMPOSIO_API_KEY }}

          # All SaaS app credentials (Composio configs, API tokens, etc.)
          # will be fetched from Azure Key Vault at runtime
        run: |
          # Make script executable
          chmod +x ./monke.sh

          # Fetch base branch for change detection in PRs
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            git fetch origin ${{ github.base_ref }}:refs/remotes/origin/${{ github.base_ref }}
            export BASE_BRANCH="origin/${{ github.base_ref }}"
          else
            export BASE_BRANCH="origin/main"
          fi

          # Let monke.sh handle change detection and test execution
          # The --changed flag will automatically detect what to test based on git diff
          echo "Running tests for changed connectors vs $BASE_BRANCH..."
          ./monke.sh --changed

      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: monke-logs
          path: monke/logs/**
