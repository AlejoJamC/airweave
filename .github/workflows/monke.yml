name: Monke Gmail + Drive (matrix, compose-aware, cached)

on:
  workflow_dispatch:
  pull_request:
    paths:
      - 'monke/**'
      - '.github/workflows/**'
      - 'docker/**'
      - 'start.sh'
  push:
    branches: [ main, feat/monke ]

concurrency:
  group: monke-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # Build images ONCE from docker/docker-compose.yml, cache layers, export as tar artifact
  prep_images:
    runs-on: ubuntu-latest
    env:
      # Tags (local-only; no registry)
      BACKEND_TAG: airweave-backend:ci-${{ github.sha }}
      FRONTEND_TAG: airweave-frontend:ci-${{ github.sha }}
      TEMPORAL_WORKER_TAG: airweave-temporal-worker:ci-${{ github.sha }}
      BUILDX_CACHE_DIR: /tmp/.buildx-cache
    steps:
      - uses: actions/checkout@v5

      # Compose references ../.env; create a tiny placeholder so Bake/Compose don’t fail parsing.
      - name: Create CI placeholder .env (for Compose parsing only)
        run: |
          if [ ! -f .env ]; then
            printf '# CI placeholder .env; real values come from job env/secrets\n' > .env
          fi

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Restore Buildx cache
        uses: actions/cache@v4
        with:
          path: ${{ env.BUILDX_CACHE_DIR }}
          key: buildx-${{ runner.os }}-${{ hashFiles('docker/**','start.sh') }}
          restore-keys: |
            buildx-${{ runner.os }}-

      # Build directly from your Compose file with Bake (v6), and load into the local daemon.
      - name: Bake build from docker/docker-compose.yml (load into daemon)
        uses: docker/bake-action@v6
        with:
          source: .
          files: docker/docker-compose.yml
          # service names from your compose:
          targets: |
            backend
            frontend
            temporal-worker
          load: true
          set: |
            *.platform=linux/amd64
            *.cache-from=type=local,src=${{ env.BUILDX_CACHE_DIR }}
            *.cache-to=type=local,dest=${{ env.BUILDX_CACHE_DIR }},mode=max
            backend.tags=${{ env.BACKEND_TAG }}
            frontend.tags=${{ env.FRONTEND_TAG }}
            temporal-worker.tags=${{ env.TEMPORAL_WORKER_TAG }}

      - name: Export images as artifact
        run: docker save "$BACKEND_TAG" "$FRONTEND_TAG" "$TEMPORAL_WORKER_TAG" -o /tmp/monke-images.tar

      - name: Upload images tar
        uses: actions/upload-artifact@v4
        with:
          name: monke-images
          path: /tmp/monke-images.tar
          retention-days: 7

  # Parallel acceptance tests; each leg uses the prebuilt images and starts its own stack quickly
  connectors:
    needs: prep_images
    runs-on: ubuntu-latest
    environment: dev
    strategy:
      fail-fast: false
      matrix:
        include:
          - connector: gmail
            config: monke/configs/gmail.yaml
            log_file: logs/gmail.rich.log
          - connector: google_drive
            config: monke/configs/google_drive.yaml
            log_file: logs/drive.rich.log
    env:
      AIRWEAVE_API_URL: http://localhost:8001

      # your existing secrets/env (available to the job AND passed to containers via override below)
      OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      MISTRAL_API_KEY: ${{ secrets.MISTRAL_API_KEY }}
      DM_AUTH_PROVIDER: composio
      DM_AUTH_PROVIDER_API_KEY: ${{ secrets.COMPOSIO_API_KEY }}
      GMAIL_AUTH_PROVIDER_ACCOUNT_ID: ${{ secrets.GMAIL_AUTH_PROVIDER_ACCOUNT_ID }}
      GMAIL_AUTH_PROVIDER_AUTH_CONFIG_ID: ${{ secrets.GMAIL_AUTH_PROVIDER_AUTH_CONFIG_ID }}
      GOOGLE_DRIVE_AUTH_PROVIDER_ACCOUNT_ID: ${{ secrets.GOOGLE_DRIVE_AUTH_PROVIDER_ACCOUNT_ID }}
      GOOGLE_DRIVE_AUTH_PROVIDER_AUTH_CONFIG_ID: ${{ secrets.GOOGLE_DRIVE_AUTH_PROVIDER_AUTH_CONFIG_ID }}

      # must match prep job
      BACKEND_TAG: airweave-backend:ci-${{ github.sha }}
      FRONTEND_TAG: airweave-frontend:ci-${{ github.sha }}
      TEMPORAL_WORKER_TAG: airweave-temporal-worker:ci-${{ github.sha }}

    steps:
      - uses: actions/checkout@v5

      - name: Set up Python 3.11 (with pip cache)
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
          cache-dependency-path: monke/requirements.txt

      - name: Install Python deps
        run: pip install -r monke/requirements.txt

      - name: Download prebuilt images
        uses: actions/download-artifact@v4
        with:
          name: monke-images
          path: ./_images

      - name: Load images
        run: docker load -i ./_images/monke-images.tar

      # Force Compose to use the prebuilt images, and pass in secrets via environment.
      - name: Compose override for CI (use prebuilt images + pass secrets)
        run: |
          mkdir -p docker
          cat > docker/docker-compose.ci.yml <<'YAML'
          services:
            backend:
              image: ${BACKEND_TAG}
              pull_policy: never
              build: null
              environment:
                - OPENAI_API_KEY=${OPENAI_API_KEY}
                - MISTRAL_API_KEY=${MISTRAL_API_KEY}
            frontend:
              image: ${FRONTEND_TAG}
              pull_policy: never
              build: null
            temporal-worker:
              image: ${TEMPORAL_WORKER_TAG}
              pull_policy: never
              build: null
              environment:
                - OPENAI_API_KEY=${OPENAI_API_KEY}
                - MISTRAL_API_KEY=${MISTRAL_API_KEY}
          YAML

      - name: Start Airweave (non-interactive)
        env:
          CI: "true"
          NONINTERACTIVE: "1"
          CI_COMPOSE_OVERRIDE: docker/docker-compose.ci.yml
        run: ./start.sh

      - name: Wait for Airweave backend health
        run: |
          for i in {1..60}; do
            if curl -fsS http://localhost:8001/health >/dev/null; then
              echo "✅ Airweave backend is healthy"; exit 0
            fi
            echo "Waiting for backend... ($i/60)"; sleep 2
          done
          echo "❌ Backend not healthy in time"; exit 1

      - name: Run Monke ${{ matrix.connector }} test
        run: |
          mkdir -p logs
          python ci_run_single.py --config "${{ matrix.config }}" --log-file "${{ matrix.log_file }}"

      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: monke-${{ matrix.connector }}-logs
          path: logs/**
