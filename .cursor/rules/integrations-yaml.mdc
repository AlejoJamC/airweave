---
description: Description of how the integrations yaml works.
globs: **/yaml/**
alwaysApply: false
---
# Airweave Integrations Configuration Structure

## YAML Configuration Structure
The `<env>.integrations.yaml` files define authentication configurations for various third-party service integrations. The structure follows this pattern:

```yaml
integrations:
  service_name:
    auth_type: "oauth2_with_refresh"  # or other auth types
    url: "https://service.com/oauth/authorize"
    backend_url: "https://service.com/oauth/token"
    grant_type: "authorization_code"
    client_id: "client_id_here"
    client_secret: "client_secret_here"
    content_type: "application/x-www-form-urlencoded"
    client_credential_location: "body"  # or "header"
    scope: "scope1 scope2 scope3"  # service-specific permissions
    requires_pkce: false  # optional, default false. Set true for PKCE-required providers (e.g., Airtable)
    additional_frontend_params:  # optional service-specific parameters
      param1: "value1"
      param2: "value2"
```

### Example Integrations

**Standard OAuth (Gmail):**
```yaml
gmail:
  auth_type: "oauth2_with_refresh"
  url: "https://accounts.google.com/o/oauth2/auth"
  backend_url: "https://oauth2.googleapis.com/token"
  grant_type: "authorization_code"
  client_id: "502433363466-d8ruvkdb3nkafulj63tnenn8iud31sks.apps.googleusercontent.com"
  client_secret: "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"
  content_type: "application/x-www-form-urlencoded"
  client_credential_location: "body"
  scope: "https://www.googleapis.com/auth/gmail.readonly"
  additional_frontend_params:
    access_type: "offline"
    prompt: "consent"
```

**OAuth with PKCE (Airtable):**
```yaml
airtable:
  oauth_type: "with_refresh"
  url: "https://airtable.com/oauth2/v1/authorize"
  backend_url: "https://airtable.com/oauth2/v1/token"
  grant_type: "authorization_code"
  client_id: "your-client-id"
  client_secret: "your-client-secret"
  content_type: "application/x-www-form-urlencoded"
  client_credential_location: "header"
  scope: "schema.bases:read data.records:read"
  requires_pkce: true  # PKCE (Proof Key for Code Exchange) prevents authorization code interception
```

**PKCE Flow Details:**
When `requires_pkce: true`, the OAuth flow includes:
1. System generates a `code_verifier` (random string) during authorization
2. Computes `code_challenge` = SHA256(code_verifier) and sends in auth URL
3. Stores `code_verifier` in `init_session.overrides` for later retrieval
4. During token exchange, sends the original `code_verifier` to prove authenticity
5. Provider verifies SHA256(code_verifier) matches the original code_challenge

This prevents authorization code interception attacks by ensuring the token exchange request comes from the same client that initiated authorization.

## Folder Structure
The files appear to be part of a structured monorepo with:

```
├── yaml/         # YAML integration configs
├── dev.integrations.yaml
└── prod.integrations.yaml
```

Note that it is alphabetically sorted.
